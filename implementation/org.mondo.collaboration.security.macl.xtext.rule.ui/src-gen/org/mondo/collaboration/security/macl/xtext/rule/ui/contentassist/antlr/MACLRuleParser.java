/*
 * generated by Xtext
 */
package org.mondo.collaboration.security.macl.xtext.rule.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.mondo.collaboration.security.macl.xtext.rule.services.MACLRuleGrammarAccess;

public class MACLRuleParser extends AbstractContentAssistParser {
	
	@Inject
	private MACLRuleGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.mondo.collaboration.security.macl.xtext.rule.ui.contentassist.antlr.internal.InternalMACLRuleParser createParser() {
		org.mondo.collaboration.security.macl.xtext.rule.ui.contentassist.antlr.internal.InternalMACLRuleParser result = new org.mondo.collaboration.security.macl.xtext.rule.ui.contentassist.antlr.internal.InternalMACLRuleParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getRoleAccess().getAlternatives(), "rule__Role__Alternatives");
					put(grammarAccess.getBindAccess().getAlternatives(), "rule__Bind__Alternatives");
					put(grammarAccess.getRuleConstraintAccess().getAlternatives(), "rule__RuleConstraint__Alternatives");
					put(grammarAccess.getRuleRightsAccess().getAlternatives(), "rule__RuleRights__Alternatives");
					put(grammarAccess.getRuleTypeAccess().getAlternatives(), "rule__RuleType__Alternatives");
					put(grammarAccess.getRuleModelAccess().getGroup(), "rule__RuleModel__Group__0");
					put(grammarAccess.getUserAccess().getGroup(), "rule__User__Group__0");
					put(grammarAccess.getGroupAccess().getGroup(), "rule__Group__Group__0");
					put(grammarAccess.getGroupAccess().getGroup_4(), "rule__Group__Group_4__0");
					put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
					put(grammarAccess.getRuleAccess().getGroup_5(), "rule__Rule__Group_5__0");
					put(grammarAccess.getBindingAccess().getGroup(), "rule__Binding__Group__0");
					put(grammarAccess.getRoleBindAccess().getGroup(), "rule__RoleBind__Group__0");
					put(grammarAccess.getValueBindAccess().getGroup(), "rule__ValueBind__Group__0");
					put(grammarAccess.getObjectBindAccess().getGroup(), "rule__ObjectBind__Group__0");
					put(grammarAccess.getRuleConstraintAccess().getGroup_0(), "rule__RuleConstraint__Group_0__0");
					put(grammarAccess.getRuleModelAccess().getRolesAssignment_0(), "rule__RuleModel__RolesAssignment_0");
					put(grammarAccess.getRuleModelAccess().getRulesAssignment_1(), "rule__RuleModel__RulesAssignment_1");
					put(grammarAccess.getUserAccess().getNameAssignment_1(), "rule__User__NameAssignment_1");
					put(grammarAccess.getGroupAccess().getNameAssignment_1(), "rule__Group__NameAssignment_1");
					put(grammarAccess.getGroupAccess().getUsersAssignment_3(), "rule__Group__UsersAssignment_3");
					put(grammarAccess.getGroupAccess().getUsersAssignment_4_1(), "rule__Group__UsersAssignment_4_1");
					put(grammarAccess.getRuleAccess().getNameAssignment_1(), "rule__Rule__NameAssignment_1");
					put(grammarAccess.getRuleAccess().getContraintAssignment_2(), "rule__Rule__ContraintAssignment_2");
					put(grammarAccess.getRuleAccess().getRolesAssignment_4(), "rule__Rule__RolesAssignment_4");
					put(grammarAccess.getRuleAccess().getRolesAssignment_5_1(), "rule__Rule__RolesAssignment_5_1");
					put(grammarAccess.getRuleAccess().getPatternAssignment_8(), "rule__Rule__PatternAssignment_8");
					put(grammarAccess.getRuleAccess().getBindingsAssignment_10(), "rule__Rule__BindingsAssignment_10");
					put(grammarAccess.getBindingAccess().getParamAssignment_1(), "rule__Binding__ParamAssignment_1");
					put(grammarAccess.getBindingAccess().getValueAssignment_2(), "rule__Binding__ValueAssignment_2");
					put(grammarAccess.getRoleBindAccess().getRoleAssignment_1(), "rule__RoleBind__RoleAssignment_1");
					put(grammarAccess.getValueBindAccess().getValueAssignment_1(), "rule__ValueBind__ValueAssignment_1");
					put(grammarAccess.getObjectBindAccess().getObjectAssignment_1(), "rule__ObjectBind__ObjectAssignment_1");
					put(grammarAccess.getRuleConstraintAccess().getTypeAssignment_0_0(), "rule__RuleConstraint__TypeAssignment_0_0");
					put(grammarAccess.getRuleConstraintAccess().getRightsAssignment_0_1(), "rule__RuleConstraint__RightsAssignment_0_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.mondo.collaboration.security.macl.xtext.rule.ui.contentassist.antlr.internal.InternalMACLRuleParser typedParser = (org.mondo.collaboration.security.macl.xtext.rule.ui.contentassist.antlr.internal.InternalMACLRuleParser) parser;
			typedParser.entryRuleRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MACLRuleGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MACLRuleGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
